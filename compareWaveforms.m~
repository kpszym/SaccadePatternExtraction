function [waveform_distance_matrix] = compareWaveforms(waveform_mat, shifted_data)
% FUNCTION: Computes the minimum Euclidean distance between each of the
%           saccade waveforms. Does so by comparing each waveform to all
%           the other waveforms and all their possible cyclic shifts.
%           
% INPUT: 
%           dist_centroid_matrix - Output from saccadeToWaveform.m. 
%
%           shifted_data - Output from cyclicShift.m
%
%           set_names - cell array continaing the labels of the sets.
% 
% OUTPUT:   
%           final_shape_dist_matrix - a TxT matrix where T is the amount of
%           trials total. Each element represents the minimum Euclidean
%           between those two saccade waveforms. 
%
% Written by Karol Szymula, Complex System Group, 2019

waveform_distance_matrix = zeros(size(waveform_mat,1),size(waveform_mat,1), 'single');
numb_shifts = (size(shifted_data,1)/2)-1;
shift_step = 600/numb_shifts;
examine_vector = 1:size(waveform_mat,1); % Vector of all the waveform idx to be compared
for n = 1:size(waveform_mat,1)-1
    bin_total_identical_idx = []; % Stores which idxs are completely identical to each other if binning the data
    if ismember(n, examine_vector)
        org_vector = shifted_data(1,:,n); % Vector to compare against all other
        start_idx = find(examine_vector == n); 
        
        % First checks if the comparison of data has to be binned into
        % smaller groups for the purpose of efficiency. Binning only is
        % required if there are more than 1000 waveforms to compare to each
        % other. This then splits the comparison into groups of 10% the
        % size of total waveforms. So if a 1000 waveforms were to be
        % compared, they would be compared in groups of 100.
        if length(examine_vector(start_idx+1:end)) >= size(waveform_mat,1)*.05 && size(waveform_mat,1) >= 1000
            binned_comp_vect_idxs = linspace(1, length(examine_vector(start_idx+1:end)), round(size(waveform_mat,1)*.10));

            full_comp_vector_idx = examine_vector(start_idx+1:end); % Idices of all waveforms being compared to current waveform
            % For loop performing comparison in bins
            for e = 1:length(binned_comp_vect_idxs)-1 

                comp_vector = full_comp_vector_idx(binned_comp_vect_idxs(e):binned_comp_vect_idxs(e+1)); % All other vector idxs for current group of waveforms to compare to

                % Compute euclidean distance between org_vector and all bin
                % waveforms and their circular shifts
                distance_calc = permute(sqrt(sum((org_vector-shifted_data(:,:,comp_vector)).^2,2)), [1,3,2]);

                % Find the index of the min distance between comparison vector and all
                % shifts of all other vectors. This step minimizes how many
                % comparisons need to occur as idicies which are found to
                % be identical will not be included in future comparisons
                [min_val, min_idx] = min(distance_calc, [], 2);

                identical_min_idx = find(min_val(1,:) == 0);
                identical_idx = comp_vector(identical_min_idx);
                waveform_distance_matrix(n, identical_idx, 1) = 0; % Setting identical waveforms edges to 0 
                
                % For each non-identical waveform get an exact distance
                % measure 
                non_identical_idx = comp_vector(find(min_val(1,:) ~= 0));
                if ~isempty(non_identical_idx)
                    % Set the idx for one shift before min_idx. Min_idx is
                    % the waveform circular shift which resulted in the
                    % minimal distance during comparison
                    min_one_idx = min_idx(1,:);
                    min_one_idx(identical_min_idx) = [];
                    real_min_idx = min_one_idx - 1;
                    real_min_idx(real_min_idx == 0) = 1; % If shifted shift is 0, correct to be idx 1
                    id = 0:1:(shift_step*2); 
                    
                    % Circular shift on a finer scale now to get a more
                    % precise distance calculation. Calculate the distance
                    % between original vector and the circular shifts at
                    % finer scale of comparison waveform
                    test_p1 = cell2mat(arrayfun(@(x) repmat(shifted_data(real_min_idx(x), :, non_identical_idx(x)), [numel(id),1]), (1:length(real_min_idx))', 'un', 0));
                    test_reshape_p1 = permute(reshape(test_p1',[size(test_p1,2), size(test_p1,1)/length(real_min_idx), length(real_min_idx)]),[2,1,3]);
                    test_reshape_shifted_p1 = cell2mat(arrayfun(@(x) circshift(test_reshape_p1(x,:,:), id(x), 2), (1:numel(id))','un',0));    
                    comparison_matrix_p1 = permute(min(sqrt(sum((org_vector-test_reshape_shifted_p1(:,:,:)).^2,2))), [1,3,2]);
                    
                    % Set the idx for one shift after min_idx
                    min_sec_idx = min_idx(2,:);
                    min_sec_idx(identical_min_idx) = [];
                    real_min_sec_idx = min_sec_idx -1;
                    real_min_sec_idx(real_min_sec_idx == 0) = 1;
                    
                    % Repeat the finer scale distance calculation for the
                    % mirror image of the comparison waveform.
                    test_p2 = cell2mat(arrayfun(@(x) repmat(shifted_data(real_min_sec_idx(x),:, non_identical_idx(x)), [numel(id),1]), (1:length(real_min_sec_idx))', 'un', 0));
                    test_reshape_p2 = permute(reshape(test_p2',[size(test_p2,2), size(test_p2,1)/length(real_min_sec_idx), length(real_min_sec_idx)]),[2,1,3]);
                    test_reshape_shifted_p2 = cell2mat(arrayfun(@(x) circshift(test_reshape_p2(x,:,:), id(x), 2), (1:numel(id))','un',0));    
                    comparison_matrix_p2 = permute(min(sqrt(sum((org_vector-test_reshape_shifted_p2(:,:,:)).^2,2))), [1,3,2]);

                    waveform_distance_matrix(n, non_identical_idx, 1) = min([comparison_matrix_p1; comparison_matrix_p2]);
                end
                bin_total_identical_idx = [bin_total_identical_idx, identical_idx];
            end
            for i_idx = bin_total_identical_idx
                examine_vector(find(examine_vector == i_idx)) = [];
                waveform_distance_matrix(i_idx, (i_idx+1):end, 1) = waveform_distance_matrix(n, (i_idx+1):end, 1);
                waveform_distance_matrix((n+1):i_idx-1, i_idx, 1) = waveform_distance_matrix(n, (n+1):(i_idx-1), 1)';
            end
        else
            comp_vector = examine_vector(start_idx+1:end); % All other vector idxs

            % Compute euclidean distance between org_vector and all other vector
            % circular shifts
            distance_calc = permute(sqrt(sum((org_vector-shifted_data(:,:,comp_vector)).^2,2)), [1,3,2]);

            % Find the index of the min distance between comparison vector and all
            % shifts of all other vectors
            [min_val, min_idx] = mink(distance_calc,2,1);

            identical_min_idx = find(min_val(1,:) == 0);
            identical_idx = comp_vector(identical_min_idx);
            waveform_distance_matrix(n, identical_idx, 1) = 0;

            non_identical_idx = comp_vector(find(min_val(1,:) ~= 0));
            if ~isempty(non_identical_idx)
                % Set the idx for one shift before min_idx
                min_one_idx = min_idx(1,:);
                min_one_idx(identical_min_idx) = [];
                real_min_idx = min_one_idx - 1;
                real_min_idx(real_min_idx == 0) = 1; % If shifted shift is 0, correct to be idx 1
                id = 0:1:(shift_step*2); 

                test_p1 = cell2mat(arrayfun(@(x) repmat(shifted_data(real_min_idx(x), :, non_identical_idx(x)), [numel(id),1]), (1:length(real_min_idx))', 'un', 0));
                test_reshape_p1 = permute(reshape(test_p1',[size(test_p1,2), size(test_p1,1)/length(real_min_idx), length(real_min_idx)]),[2,1,3]);
                test_reshape_shifted_p1 = cell2mat(arrayfun(@(x) circshift(test_reshape_p1(x,:,:), id(x), 2), (1:numel(id))','un',0));    
                comparison_matrix_p1 = permute(min(sqrt(sum((org_vector-test_reshape_shifted_p1(:,:,:)).^2,2))), [1,3,2]);

                min_sec_idx = min_idx(2,:);
                min_sec_idx(identical_min_idx) = [];
                real_min_sec_idx = min_sec_idx -1;
                real_min_sec_idx(real_min_sec_idx == 0) = 1;

                test_p2 = cell2mat(arrayfun(@(x) repmat(shifted_data(real_min_sec_idx(x),:, non_identical_idx(x)), [numel(id),1]), (1:length(real_min_sec_idx))', 'un', 0));
                test_reshape_p2 = permute(reshape(test_p2',[size(test_p2,2), size(test_p2,1)/length(real_min_sec_idx), length(real_min_sec_idx)]),[2,1,3]);
                test_reshape_shifted_p2 = cell2mat(arrayfun(@(x) circshift(test_reshape_p2(x,:,:), id(x), 2), (1:numel(id))','un',0));    
                comparison_matrix_p2 = permute(min(sqrt(sum((org_vector-test_reshape_shifted_p2(:,:,:)).^2,2))), [1,3,2]);

                waveform_distance_matrix(n, non_identical_idx, 1) = min([comparison_matrix_p1; comparison_matrix_p2]);
            end
            for i_idx = identical_idx
                examine_vector(find(examine_vector == i_idx)) = [];
                waveform_distance_matrix(i_idx, (i_idx+1):end, 1) = waveform_distance_matrix(n, (i_idx+1):end, 1);
                waveform_distance_matrix((n+1):i_idx-1, i_idx, 1) = waveform_distance_matrix(n, (n+1):(i_idx-1), 1)';
            end
        end
    end
end

end

